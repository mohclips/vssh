#!/usr/bin/env bash
#
# Quickly ssh into a vagrant box, or run a command
# over SSH. CDs into the current directory relative
# to `root` as specified in the config.
#
# Caches `vagrant ssh-config` to achieve the speed.
#

VERSION="3.0.0"
DEFAULT_ROOT='/vagrant'

args="${@}"
exec_dir="${PWD}"
vagrant_dir="${PWD}"

SSH_CONFIG=".vagrant/ssh_config"

help()
{
  cat<<EOF
  ${VERSION}
  Usage: 
    vssh [options] 

  -v    Print the vssh version
  -h    Display this message
  -r    Interactively generate a new vssh config (do this first!)

  or
    vssh remote_host [-c "command(s)"]

  -c  Execute this command on the remote host
EOF
}


find_vagrant_dir()
{
  if [ -d .vagrant ]; then
    vagrant_dir=${PWD}

    return
  fi

  if [ "${PWD}" == "/" ]; then
    echo "Vagrant directory not found; exiting."

    exit 1
  fi

  cd ..

  find_vagrant_dir
}

find_vssh_config()
{
  if ! [ -a "$(vssh_config_path)" ]; then
    read -sp "vssh config not found. Create it now?" -n 1
    echo "\n"

    if [[ "${REPLY}" == "y" || "${REPLY}" == "" ]]; then
      generate_vssh_config
    else
      echo "We need a vssh config to continue."
      echo "Please create one at $(vssh_config_path) or choose to generate next time."

      exit 0
    fi
  fi

  parse_vssh_config
}

vssh_config_path()
{
    echo "${PWD}/.vagrant/vssh.cfg"
}

parse_vssh_config()
{
  source "$(vssh_config_path)"
}

generate_ssh_config()
{
  vagrant ssh-config > $SSH_CONFIG
}

find_ssh_config()
{
  if ! [ -a $SSH_CONFIG ]; then
    echo "Vagrant ssh config not found; generating."

    generate_ssh_config
  fi
}

ssh_connect()
{
    remote_host=$1
    shift
    command=$1
    shift
    ssh -F $SSH_CONFIG -t $remote_host "$command"\
        3>&1 1>&2 2>&3 3>&-
}

# Directory to switch to inside the box.
box_dir()
{
  echo "${root}${exec_dir#${vagrant_dir}}"
}


ssh_command()
{
  if [ "${args}" = "" ]; then
    echo "\$SHELL -l"
  else
    echo "\$SHELL -l -c \"${args[@]}\""
  fi
}

###############################################################################################
#
# main
#

ARGS=() ### this array holds any positional arguments, i.e., arguments not started with dash

while [ $# -gt 0 ]; do
    while getopts :hvrc: name; do
        case $name in
          h) # display Help
            help
            exit;;
          v) # display version
            echo "Version: $VERSION"
            exit;;
          r) # create config
            echo "Generating a new "
            generate_ssh_config
            exit;;
          c) # Enter a name
            command=$OPTARG;;
          \?) # Invalid option
            echo "Error: Invalid option"
            exit;;
        esac
    done
    [ $? -eq 0 ] || exit 1
    [ $OPTIND -gt $# ] && break   # we reach end of parameters

    shift $[$OPTIND - 1] # free processed options so far
    OPTIND=1             # we must reset OPTIND
    ARGS[${#ARGS[*]}]=$1 # save first non-option argument (a.k.a. positional argument)
    shift                # remove saved arg
done

if [[ ${#ARGS[*]} -ne 1 ]]; then
  echo "ERROR:only one postitional parameter expected ie. a remote_hostname"
  help
  exit 1
fi

find_vagrant_dir

find_ssh_config

remote_host=${ARGS[0]}
ssh_connect "$remote_host" "$command"
